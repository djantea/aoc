<!-- vim: syntax=markdown -->

# AoC - Day 10

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.5.1"}
])
```

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
input =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)

:ok
```

```elixir
defmodule Syntax do
  def check(line), do: check(line, [])

  def check(<<?(, rest::binary>>, stack), do: check(rest, [?) | stack])
  def check(<<?[, rest::binary>>, stack), do: check(rest, [?] | stack])
  def check(<<?{, rest::binary>>, stack), do: check(rest, [?} | stack])
  def check(<<?<, rest::binary>>, stack), do: check(rest, [?> | stack])

  def check(<<char, rest::binary>>, [char | rest_stack]), do: check(rest, rest_stack)

  def check(<<>>, []), do: :ok
  def check(<<>>, stack), do: {:incomplete, stack}
  def check(<<char, _rest::binary>>, _stack), do: {:corrupt, char}
end
```

## Part 1

```elixir
points = %{
  ?) => 3,
  ?] => 57,
  ?} => 1197,
  ?> => 25137
}

for line <- input,
    {:corrupt, char} <- [Syntax.check(line)],
    reduce: 0 do
  acc -> acc + points[char]
end
```

## Part 2

```elixir
points = %{
  ?) => 1,
  ?] => 2,
  ?} => 3,
  ?> => 4
}

scores =
  Enum.sort(
    for line <- input,
        {:incomplete, completion} <- [Syntax.check(line)] do
      Enum.reduce(completion, 0, fn char, acc ->
        acc * 5 + points[char]
      end)
    end
  )

Enum.at(scores, scores |> length() |> div(2))
```
